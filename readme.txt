To compile and run this vmpager.c program, you simply enter "make" into the command line and the makefile will create an executable, "vmpager", for you. You can just enter "./vmpager" to run. If you do not have the makefile or if the makefile does not work. You can just type in "gcc vmpager.c -o vmpager" to compile and make the executable. Then run the program by typing in "./vmpager", or just "gcc vmpager.c" and then "./a.out" will do as well. You must enter at least 2 arguments(including the executable) or else my program will display an error message. So you must enter "./vmpager {myDataFile}" or "./a.out {myDataFile} to run this program. The program will read and process the entire input data file with a frame table of size 256 if you only enter 2 arguments. Argv[2] will indicate the #memoryAccesses and argv[3] will indicate frameTableSize. If the user enters a number that is either less than or equal to 0 or greater than the Upper Limit for #memoryAccesses then the program will read and process the entire input data file. If the user enters a number that is either less than or equal to 0 or greater than 256 for frameTableSize then the frameTableSize will default to 256.

NOTE: I have implemented 2 optional enhancements. So I expect that any mistakes that I would have made is made up for the extra work I have done, or if no mistakes then I should get 100/100. I have implemented a "Random Victim Algorithm", which picks a random victim instead of the next victim, and a "Second Chance Algorithm", which gives the current victim a second chance before being kicked out. So one you have finished running the program, it will display final results for Infinite Finite, FIFO, Random Victim, and Second Chance algorithms. My short memo/report will also include all of the statistics from these algorithms 

NOTE: I have included a “.pdf” and a “.xlsx” file of my short memo/report of my analysis in case one of them did not work. The first three spread sheets: “light_drops.raw”, JohnBell.gif”, and “Chevalier_473.raw” compares the hits of all the algorithms with all of the memory accesses(reads entire file) and with different frame table sizes. The last three spread sheets:  “light_drops.raw(Memory Accesses)”, JohnBell.gif(Memory Accesses)”, and “Chevalier_473.raw(Memory Accesses)” compares the hits of all the algorithms with different number of memory accesses and a default of 256 frame table size. So maybe the last three spreadsheets can also be considered optional enhancements since I wasn’t required to analyze change in results with different memory accesses, but with different frame table sizes. 

NOTE: This is my first late day that I am using.
